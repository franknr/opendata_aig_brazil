temp_ano = unique(ocorrencia_ano)
table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE'))
table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE' & ocorrencia_ano == '2006'))
sum(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE' & ocorrencia_ano == '2006')))
for(i in temp_class){
nomearquivo = paste("images/por_mes_", tolower(i),".jpg", sep="")
bmp(nomearquivo,width=graficolargura1,height=graficoaltura1)
indice_cor = which(temp_class==i)  #captura o indice da palavra i
barplot(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i)),
main = paste("Total de ", toTitleCase(tolower(i)), "s", " por Mês entre ",
substring(min(ocorrencia_dia), 1, 4),
"-",
substring(max(ocorrencia_dia), 1, 4), sep=""), #título do gráfico
col = rep(rainbow(indice_cor)[indice_cor], length(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i)))), #cores das barras
ylab = paste("Total de ", toTitleCase(tolower(i)), "s", sep=""), #label do eixo y
xlab = "Mês", #label do eixo x
cex.names = 0.8, #tamanho do texto dos eixos
axis.lty=1, #define padrão de linha do eixo x
las=1, #rotaciona labels eixo x
width=0.3, #largura das barras
space=0.5 #espaço entre as barras
)
mtext(dia_compilacao, side=1, line=4, cex=1)
dev.off()
for(j in temp_ano){
nomearquivo = paste("images/por_mes_", tolower(i), "_ano_", j, ".jpg", sep="")
bmp(nomearquivo,width=graficolargura1,height=graficoaltura1)
barplot(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i & ocorrencia_ano == j)),
main = paste("Total de ", toTitleCase(tolower(i)), "s", " por Mês no Ano de ", j, sep=""), #título do gráfico
col = rep(rainbow(indice_cor)[indice_cor], length(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i)))), #cores das barras
ylab = paste("Total de ", toTitleCase(tolower(i)), "s", sep=""), #label do eixo y
xlab = "Mês", #label do eixo x
cex.names = 0.8, #tamanho do texto dos eixos
axis.lty=1, #define padrão de linha do eixo x
las=1, #rotaciona labels eixo x
width=0.3, #largura das barras
space=0.5 #espaço entre as barras
)
mtext(dia_compilacao, side=1, line=4, cex=1)
dev.off()
}
}
indice_cor
rainbow(3)
rainbow(3)[3]
rainbow()
rainbow(3)
length(table(ocorrencia_classificacao))
rainbow(length(table(ocorrencia_classificacao)))
#GRAPHS#
##################################
#carregamento de bibliotecas
##################################
library(readr)
library(tools) #capitalize texto
##################################
#definindo diretorio de analise
##################################
getwd()
directory <- "/home/cleibson/projetos/opendata_aig_brazil/script"
setwd(directory)
##################################
#lendo os dados
##################################
oco <- read_delim("../data/all.csv", "~", escape_double = FALSE, trim_ws = TRUE)
attach(oco)
##################################
#Configuracoes gerais
##################################
paleta_cores=c("rosybrown3","gray69","palegoldenrod","paleturquoise3","palegreen2")
dia_compilacao = paste("Dados compilados em ", format(dia_extracao[1], format="%d/%m/%Y"))
graficolargura=800
graficoaltura=450
graficolargura1=600
graficoaltura1=350
graficolargura2=700
graficoaltura2=400
##################################
#Classificação da Ocorrência
##################################
nomearquivo=paste("images/classificacao","001",".jpg",sep="_")
bmp(nomearquivo,width=graficolargura1,height=graficoaltura1)
barplot(table(ocorrencia_classificacao),
main = paste("Total de Ocorrências entre ",
substring(min(ocorrencia_dia), 1, 4),
"-",
substring(max(ocorrencia_dia), 1, 4)), #título do gráfico
col = rainbow(length(table(ocorrencia_classificacao))), #cores das barras
ylab = "Total de Ocorrências", #label do eixo y
cex.names = 0.8, #tamanho do texto dos eixos
axis.lty=1, #define padrão de linha do eixo x
las=1, #rotaciona labels eixo x
width=0.3,
space=0.5
)
mtext(dia_compilacao, side=1, line=4, cex=1)
dev.off()
##################################
#Ocorrências por mês
##################################
ocorrencia_mes = substring(ocorrencia_dia, 6, 7)
ocorrencia_ano = substring(ocorrencia_dia, 1, 4)
temp_class = unique(ocorrencia_classificacao)
temp_ano = unique(ocorrencia_ano)
table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE'))
table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE' & ocorrencia_ano == '2006'))
sum(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE' & ocorrencia_ano == '2006')))
for(i in temp_class){
nomearquivo = paste("images/por_mes_", tolower(i),".jpg", sep="")
bmp(nomearquivo,width=graficolargura1,height=graficoaltura1)
indice_cor = which(temp_class==i)  #captura o indice da palavra i
barplot(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i)),
main = paste("Total de ", toTitleCase(tolower(i)), "s", " por Mês entre ",
substring(min(ocorrencia_dia), 1, 4),
"-",
substring(max(ocorrencia_dia), 1, 4), sep=""), #título do gráfico
col = rep(rainbow(indice_cor)[indice_cor], length(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i)))), #cores das barras
ylab = paste("Total de ", toTitleCase(tolower(i)), "s", sep=""), #label do eixo y
xlab = "Mês", #label do eixo x
cex.names = 0.8, #tamanho do texto dos eixos
axis.lty=1, #define padrão de linha do eixo x
las=1, #rotaciona labels eixo x
width=0.3, #largura das barras
space=0.5 #espaço entre as barras
)
mtext(dia_compilacao, side=1, line=4, cex=1)
dev.off()
for(j in temp_ano){
nomearquivo = paste("images/por_mes_", tolower(i), "_ano_", j, ".jpg", sep="")
bmp(nomearquivo,width=graficolargura1,height=graficoaltura1)
barplot(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i & ocorrencia_ano == j)),
main = paste("Total de ", toTitleCase(tolower(i)), "s", " por Mês no Ano de ", j, sep=""), #título do gráfico
col = rep(rainbow(indice_cor)[indice_cor], length(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i)))), #cores das barras
ylab = paste("Total de ", toTitleCase(tolower(i)), "s", sep=""), #label do eixo y
xlab = "Mês", #label do eixo x
cex.names = 0.8, #tamanho do texto dos eixos
axis.lty=1, #define padrão de linha do eixo x
las=1, #rotaciona labels eixo x
width=0.3, #largura das barras
space=0.5 #espaço entre as barras
)
mtext(dia_compilacao, side=1, line=4, cex=1)
dev.off()
}
}
##################################
#Ocorrências por Tipo de Aeronave
##################################
nomearquivo=paste("images/aeronave_tipo","001",".jpg",sep="_")
bmp(nomearquivo,width=graficolargura2, height=graficoaltura2)
barplot(sort(table(aeronave_equipamento), decreasing = TRUE),
main = paste("Total de Ocorrências por Tipo de Aeronave entre ",
substring(min(ocorrencia_dia), 1, 4),
"-",
substring(max(ocorrencia_dia), 1, 4)), #título do gráfico
col = rainbow(length(table(aeronave_equipamento))), #cores das barras
ylab = "Total de Ocorrências", #label do eixo y
xlab = "Tipo de Aeronave", #label do eixo x
cex.names = 0.7, #tamanho do texto dos eixos
axis.lty=1, #define padrão de linha do eixo x
las=1, #rotaciona labels eixo x
width=0.3,
space=0.5
)
mtext(dia_compilacao, side=1, line=4, cex=1)
dev.off()
# nomearquivo=paste("images/por_mes_acidente",".jpg",sep="_")
# bmp(nomearquivo,width=graficolargura1,height=graficoaltura1)
# barplot(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE')),
#         main = paste("Total de Acidentes por Mês entre ",
#                      substring(min(ocorrencia_dia), 1, 4),
#                      "-",
#                      substring(max(ocorrencia_dia), 1, 4)), #título do gráfico
#         col = rep(rainbow(1), length(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE')))), #cores das barras
#         ylab = "Total de Ocorrências", #label do eixo y
#         xlab = "Mês", #label do eixo x
#         cex.names = 0.8, #tamanho do texto dos eixos
#         axis.lty=1, #define padrão de linha do eixo x
#         las=1, #rotaciona labels eixo x
#         width=0.3,
#         space=0.5
# )
# mtext(dia_compilacao, side=1, line=4, cex=1)
# dev.off()
library(ggplot2)
load(mpg)
data(mpg)
names(mpg)
help(mpg)
displ
mpg$displ
mpg$drv
mpg$manufacturer
mpg$manufacturer
mpg$model
mpg$displ
mpg$year
mpg$cyl
mpg$trans
mpg$drv
mpg$cty
mpg$fl
mpg$class
ggplot(data=mpg, aes(hwy, cty))
ggplot(data = mpg, aes(x = hwy, y = cty))
ggplot(data = mpg, aes(x = mpg$hwy, y = mpg$cty))
qplot(data = mpg, aes(x = mpg$hwy, y = mpg$cty))
attach(mpg)
ggplot(data = mpg, aes(x = hwy, y = cty))
ggplot(data = mpg, aes(x = hwy, y = cty)) + geom_point()
ggplot(data = mpg, aes(x = hwy, y = cty)) + geom_point(color = cyl)
library(ggplot2)
data(mpg)
names(mpg)
mpg$manufacturer
mpg$model
mpg$displ
mpg$year
mpg$cyl
mpg$trans
mpg$drv
mpg$cty
mpg$hwy
mpg$fl
mpg$class
attach(mpg)
ggplot(data = mpg, aes(x = hwy, y = cty)) + geom_point(color = cyl)
dim(mpg)
ggplo(data = mpg) + geom_bar(color = cyl)
ggplot(data = mpg) + geom_bar(color = cyl)
ggplot(data = mpg, aes(x = hwy, y = cty)) + geom_bar(color = cyl)
mpg
ggplot(data = mpg, aes(x = hwy, y = cty)) + geom_point(color = cyl)
d=expand.grid(obs=0:10, benchmark=c('antlr', 'bloat', 'chart', 'eclipse', 'fop', 'hsqldb', 'jython', 'luindex', 'lusearch', 'pmd', 'xalan'), gc=c('CopyMS', 'GenCopy', 'GenImmix', 'GenMS', 'Immix'), opt=c('on', 'off'), heapSize=seq(from=1.5, to=4, by=0.5))
d$time = rexp(nrow(d), 0.01)+1000
d$time = d$time + abs(d$heapSize-3)*100
d$time[d$opt=='on'] = d$time[d$opt=='on']-200
d$time[d$opt=='on' & d$benchmark=='bloat'] = d$time[d$opt=='on' & d$benchmark=='bloat'] + 190
d$time[d$opt=='on' & d$benchmark=='pmd' & d$gc=='Immix'] = d$time[d$opt=='on' & d$benchmark=='pmd' & d$gc=='Immix'] + 600
No Faceting
First, let's create a very high level summarization of that data:
ggplot() +
geom_boxplot(data=d, mapping=aes(x=opt, y=time, color=opt))
facet_wrap()
Now let's use faceting to break the results down by benchmark:
ggplot() +
facet_wrap(~benchmark) +
geom_boxplot(data=d, mapping=aes(x=opt, y=time, color=opt))
facet_wrap(~benchmark) creates a separate panel for each benchmark. The panels are wrapped into multiple rows on a grid. Wrapping the panels is especially useful when we have a factor with a larger number of levels (such as benchmarks, which has 11 levels); without wrapping, the plot can become overly wide (or the individual panels overly narrow).
The above plot shows that the "bloat" benchmark does not seem to benefit much from our optimization (its run time does not decrease much when we enable the optimization). The plot also shows that the optimized run time of the "pmd" benchmark is dispersed more (the box is taller).
facet_grid()
And now let's facet by two variables: in addition to benchmark (horizontally), we also use gc (vertically):
ggplot() +
facet_grid(gc~benchmark) +
geom_boxplot(data=d, mapping=aes(x=opt, y=time, color=opt))
facet_grid(gc~benchmark) produces a separate panel for each gc-benchmark combination and places the panels in a grid with one row for each gc and one column for each benchmark.
The above plot shows the reason for the wider dispersion of the time for the "pmd" benchmark: for most gcs, switching on the optimization reduces run time, however, when running on the "Immix" collector, the optimization actually degrades performance (increases run time).
copyright (c) 2015 - sape research group
Publication Highlights
OOPSLA'15 - Use at Own Risk
PPPJ'13 - Jikes RVM Debugger
PLDI'12 - Algorithmic Profiling
OOPSLA'11 - Catch Me
ECOOP'11 - Beauty and Beast
PLDI'10 - Profiler (In)Accuracy
ASPLOS'09 - Measurement Bias
More...
Blast
Our framework for bytecode-level information-flow tracing of Java programs.
Jike
o
}
{}
dddd
q()
pp
d=expand.grid(obs=0:10, benchmark=c('antlr', 'bloat', 'chart', 'eclipse', 'fop', 'hsqldb', 'jython', 'luindex', 'lusearch', 'pmd', 'xalan'), gc=c('CopyMS', 'GenCopy', 'GenImmix', 'GenMS', 'Immix'), opt=c('on', 'off'), heapSize=seq(from=1.5, to=4, by=0.5))
d$time = rexp(nrow(d), 0.01)+1000
d$time = d$time + abs(d$heapSize-3)*100
d$time[d$opt=='on'] = d$time[d$opt=='on']-200
d$time[d$opt=='on' & d$benchmark=='bloat'] = d$time[d$opt=='on' & d$benchmark=='bloat'] + 190
d$time[d$opt=='on' & d$benchmark=='pmd' & d$gc=='Immix'] = d$time[d$opt=='on' & d$benchmark=='pmd' & d$gc=='Immix'] + 600
d=expand.grid(obs=0:10, benchmark=c('antlr', 'bloat', 'chart', 'eclipse', 'fop', 'hsqldb', 'jython', 'luindex', 'lusearch', 'pmd', 'xalan'), gc=c('CopyMS', 'GenCopy', 'GenImmix', 'GenMS', 'Immix'), opt=c('on', 'off'), heapSize=seq(from=1.5, to=4, by=0.5))
d$time = rexp(nrow(d), 0.01)+1000
d$time = d$time + abs(d$heapSize-3)*100
d$time[d$opt=='on'] = d$time[d$opt=='on']-200
d$time[d$opt=='on' & d$benchmark=='bloat'] = d$time[d$opt=='on' & d$benchmark=='bloat'] + 190
d$time[d$opt=='on' & d$benchmark=='pmd' & d$gc=='Immix'] = d$time[d$opt=='on' & d$benchmark=='pmd' & d$gc=='Immix'] + 600
d
ggplot() +
geom_boxplot(data=d, mapping=aes(x=opt, y=time, color=opt))
library(ggplot2)
ggplot() +
geom_boxplot(data=d, mapping=aes(x=opt, y=time, color=opt))
ggplot() +
facet_wrap(~benchmark) +
geom_boxplot(data=d, mapping=aes(x=opt, y=time, color=opt))
ggplot() +
facet_wrap(~year) +
geom_boxplot(data=mpg, mapping=aes(x=class, y=cty, color=class))
ggplot() +
facet_wrap(~cyl) +
geom_boxplot(data=mpg, mapping=aes(x=class, y=cty, color=class))
ggplot() +
facet_wrap(~drv) +
geom_boxplot(data=mpg, mapping=aes(x=class, y=cty, color=class))
ggplot() +
facet_wrap(~drv) +
geom_boxplot(data=mpg, mapping=aes(x=cyl, y=cty, color=class))
ggplot() +
facet_wrap(~drv) +
geom_boxplot(data=mpg, mapping=aes(x=cyl, y=cty, color=cyl))
ggplot() +
facet_wrap(~drv) +
geom_boxplot(data=mpg, mapping=aes(x=manufacturer, y=cty, color=manufacturer))
ggplot() +
facet_wrap(~drv) +
geom_boxplot(data=mpg, mapping=aes(x=fl, y=cty, color=manufacturer))
ggplot() +
facet_wrap(~drv) +
geom_boxplot(data=mpg, mapping=aes(x=fl, y=cty, color=fl))
library(ggplot2)
data(mpg)
names(mpg)
mpg$manufacturer
mpg$model
mpg$displ
mpg$year
mpg$cyl
mpg$trans
mpg$drv
mpg$cty
mpg$hwy
mpg$fl
mpg$class
dim(mpg)
attach(mpg)
ggplot(data = mpg, aes(x = hwy, y = cty)) + geom_point(color = cyl)
ggplot() +
facet_wrap(~drv) +
geom_boxplot(data=mpg, mapping=aes(x=fl, y=cty, color=fl))
#terceiro gráfico | Mapa de Calor
ggplot(mpg, aes(x = manufacturer, y = drv)) +
geom_raster(aes(fill = cty)) +
labs(title = "Mapa de Calor", x = "Fabricantes", y = "Tipo de Tração") +
scale_fill_continuous(name = "cty")
ggplot(mpg, aes(x = manufacturer, y = drv)) +
geom_raster(aes(fill = cty)) +
labs(title = "Mapa de Calor", x = "Fabricantes", y = "Tipo de Tração") +
scale_fill_continuous(name = "cty") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(mpg, aes(x = manufacturer, y = drv)) +
geom_raster(aes(fill = cty)) +
labs(title = "Mapa de Calor | Consumo de Combustível na Cidade", x = "Fabricantes", y = "Tipo de Tração") +
scale_fill_continuous(name = "cty") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
trans
fl
ggplot(mpg, aes(x = manufacturer, y = model)) +
geom_raster(aes(fill = cty)) +
labs(title = "Mapa de Calor | Consumo de Combustível na Cidade", x = "Fabricantes", y = "Tipo de Tração") +
scale_fill_continuous(name = "cty") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(mpg)
#terceiro gráfico | Mapa de Calor
ggplot(mpg, aes(x = manufacturer, y = displ)) +
geom_raster(aes(fill = cty)) +
labs(title = "Mapa de Calor | Consumo de Combustível na Cidade", x = "Fabricantes", y = "Tipo de Tração") +
scale_fill_continuous(name = "cty") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#terceiro gráfico | Mapa de Calor
ggplot(mpg, aes(x = manufacturer, y = fl)) +
geom_raster(aes(fill = cty)) +
labs(title = "Mapa de Calor | Consumo de Combustível na Cidade", x = "Fabricantes", y = "Tipo de Combustível") +
scale_fill_continuous(name = "cty") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(adastro)
#GRAPHS#
##################################
#carregamento de bibliotecas uteis
##################################
library(readr)
library(tools) #capitalize texto
##################################
#definindo diretorio de analise
##################################
getwd()
directory <- "/home/cleibson/projetos/opendata_aig_brazil/script"
setwd(directory)
##################################
#lendo os dados
##################################
oco <- read_delim("../data/all.csv", "~", escape_double = FALSE, trim_ws = TRUE)
attach(oco)
##################################
#Configuracoes gerais
##################################
paleta_cores=c("rosybrown3","gray69","palegoldenrod","paleturquoise3","palegreen2")
dia_compilacao = paste("Dados compilados em ", format(dia_extracao[1], format="%d/%m/%Y"))
graficolargura=800
graficoaltura=450
graficolargura1=600
graficoaltura1=350
graficolargura2=700
graficoaltura2=400
##################################
#Classificação da Ocorrência
##################################
nomearquivo=paste("images/classificacao","001",".jpg",sep="_")
bmp(nomearquivo,width=graficolargura1,height=graficoaltura1)
barplot(table(ocorrencia_classificacao),
main = paste("Total de Ocorrências entre ",
substring(min(ocorrencia_dia), 1, 4),
"-",
substring(max(ocorrencia_dia), 1, 4)), #título do gráfico
col = rainbow(length(table(ocorrencia_classificacao))), #cores das barras
ylab = "Total de Ocorrências", #label do eixo y
cex.names = 0.8, #tamanho do texto dos eixos
axis.lty=1, #define padrão de linha do eixo x
las=1, #rotaciona labels eixo x
width=0.3,
space=0.5
)
mtext(dia_compilacao, side=1, line=4, cex=1)
dev.off()
##################################
#Ocorrências por mês
##################################
ocorrencia_mes = substring(ocorrencia_dia, 6, 7)
ocorrencia_ano = substring(ocorrencia_dia, 1, 4)
temp_class = unique(ocorrencia_classificacao)
temp_ano = unique(ocorrencia_ano)
table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE'))
table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE' & ocorrencia_ano == '2006'))
sum(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE' & ocorrencia_ano == '2006')))
for(i in temp_class){
nomearquivo = paste("images/por_mes_", tolower(i),".jpg", sep="")
bmp(nomearquivo,width=graficolargura1,height=graficoaltura1)
indice_cor = which(temp_class==i)  #captura o indice da palavra i
barplot(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i)),
main = paste("Total de ", toTitleCase(tolower(i)), "s", " por Mês entre ",
substring(min(ocorrencia_dia), 1, 4),
"-",
substring(max(ocorrencia_dia), 1, 4), sep=""), #título do gráfico
col = rep(rainbow(indice_cor)[indice_cor], length(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i)))), #cores das barras
ylab = paste("Total de ", toTitleCase(tolower(i)), "s", sep=""), #label do eixo y
xlab = "Mês", #label do eixo x
cex.names = 0.8, #tamanho do texto dos eixos
axis.lty=1, #define padrão de linha do eixo x
las=1, #rotaciona labels eixo x
width=0.3, #largura das barras
space=0.5 #espaço entre as barras
)
mtext(dia_compilacao, side=1, line=4, cex=1)
dev.off()
for(j in temp_ano){
nomearquivo = paste("images/por_mes_", tolower(i), "_ano_", j, ".jpg", sep="")
bmp(nomearquivo,width=graficolargura1,height=graficoaltura1)
barplot(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i & ocorrencia_ano == j)),
main = paste("Total de ", toTitleCase(tolower(i)), "s", " por Mês no Ano de ", j, sep=""), #título do gráfico
col = rep(rainbow(indice_cor)[indice_cor], length(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == i)))), #cores das barras
ylab = paste("Total de ", toTitleCase(tolower(i)), "s", sep=""), #label do eixo y
xlab = "Mês", #label do eixo x
cex.names = 0.8, #tamanho do texto dos eixos
axis.lty=1, #define padrão de linha do eixo x
las=1, #rotaciona labels eixo x
width=0.3, #largura das barras
space=0.5 #espaço entre as barras
)
mtext(dia_compilacao, side=1, line=4, cex=1)
dev.off()
}
}
##################################
#Ocorrências por Tipo de Aeronave
##################################
nomearquivo=paste("images/aeronave_tipo","001",".jpg",sep="_")
bmp(nomearquivo,width=graficolargura2, height=graficoaltura2)
barplot(sort(table(aeronave_equipamento), decreasing = TRUE),
main = paste("Total de Ocorrências por Tipo de Aeronave entre ",
substring(min(ocorrencia_dia), 1, 4),
"-",
substring(max(ocorrencia_dia), 1, 4)), #título do gráfico
col = rainbow(length(table(aeronave_equipamento))), #cores das barras
ylab = "Total de Ocorrências", #label do eixo y
xlab = "Tipo de Aeronave", #label do eixo x
cex.names = 0.7, #tamanho do texto dos eixos
axis.lty=1, #define padrão de linha do eixo x
las=1, #rotaciona labels eixo x
width=0.3,
space=0.5
)
mtext(dia_compilacao, side=1, line=4, cex=1)
dev.off()
# nomearquivo=paste("images/por_mes_acidente",".jpg",sep="_")
# bmp(nomearquivo,width=graficolargura1,height=graficoaltura1)
# barplot(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE')),
#         main = paste("Total de Acidentes por Mês entre ",
#                      substring(min(ocorrencia_dia), 1, 4),
#                      "-",
#                      substring(max(ocorrencia_dia), 1, 4)), #título do gráfico
#         col = rep(rainbow(1), length(table(subset(ocorrencia_mes, subset = ocorrencia_classificacao == 'ACIDENTE')))), #cores das barras
#         ylab = "Total de Ocorrências", #label do eixo y
#         xlab = "Mês", #label do eixo x
#         cex.names = 0.8, #tamanho do texto dos eixos
#         axis.lty=1, #define padrão de linha do eixo x
#         las=1, #rotaciona labels eixo x
#         width=0.3,
#         space=0.5
# )
# mtext(dia_compilacao, side=1, line=4, cex=1)
# dev.off()
